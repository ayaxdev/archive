package ja.tabio.argon.processor.impl;

import de.florianmichael.rclasses.math.MathUtils;
import io.github.racoondog.norbit.EventHandler;
import ja.tabio.argon.event.impl.ProcessPacketEvent;
import ja.tabio.argon.processor.Processor;
import ja.tabio.argon.utils.player.ChatUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C19PacketResourcePackStatus;
import net.minecraft.network.play.server.S19PacketEntityStatus;
import net.minecraft.network.play.server.S27PacketExplosion;
import net.minecraft.network.play.server.S2APacketParticles;
import net.minecraft.network.play.server.S48PacketResourcePackSend;

import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;

public class ExploitFixerProcessor extends Processor {

    @EventHandler
    public final void onPacket(final ProcessPacketEvent packetEvent) {
        final Packet<?> packet = packetEvent.packet;

        // Packet exploit fix
        if (packet instanceof S2APacketParticles s2A) {
            if(Math.abs(s2A.getParticleSpeed()) > 10) {
                s2A.particleSpeed = MathUtils.clamp(s2A.particleSpeed, -9, 9);
                ChatUtil.send("Possible crash attempt from the server blocked");
            }
            if(s2A.getParticleCount() > 500) {
                s2A.particleCount = 450;
                ChatUtil.send("Possible crash attempt from the server blocked");
            }
        }

        // Crash exploit fix
        if (packet instanceof S27PacketExplosion s27) {
            if (Math.abs(s27.strength) > 99 || Math.abs(s27.posX) > 99 || Math.abs(s27.posY) > 99 || Math.abs(s27.posZ) > 99) {
                s27.posX = MathUtils.clamp(s27.posX, -90, 90);
                s27.posY = MathUtils.clamp(s27.posY, -90, 90);
                s27.posZ = MathUtils.clamp(s27.posZ, -90, 90);
                s27.strength = MathUtils.clamp(s27.strength, -90, 90);
                ChatUtil.send("Possible crash attempt from the server blocked");
            }
        }

        // Sound crash exploit fix
        if (packet instanceof S19PacketEntityStatus s19) {
            if (s19.getOpCode() == 21)
                packetEvent.cancelled = true;
        }

        // Resource pack exploit fix
        if (packet instanceof S48PacketResourcePackSend s48) {
            String url = s48.getURL(), hash = s48.getHash();
            try {
                URI uri = new URI(url);
                String scheme = uri.getScheme();
                boolean isLevelProtocol = "level".equals(scheme);
                if (!"http".equals(scheme) && !"https".equals(scheme) && !isLevelProtocol) {
                    mc.thePlayer.sendQueue.addToSendQueue(new C19PacketResourcePackStatus(hash, C19PacketResourcePackStatus.Action.FAILED_DOWNLOAD));
                    packetEvent.cancelled = true;
                }
                url = URLDecoder.decode(url.substring("level://".length()), StandardCharsets.UTF_8);
                if (isLevelProtocol && (url.contains("..") || !url.endsWith("/resources.zip"))) {
                    ChatUtil.sendImportant("Server attempted to access the files on your computer");
                    packetEvent.cancelled = true;
                }
            } catch (URISyntaxException ex) {
                packetEvent.cancelled = true;
            }
        }
    }

}
