package lord.daniel.alexander.module.impl.exploit;

import io.github.nevalackin.homoBus.Listener;
import io.github.nevalackin.homoBus.annotations.EventLink;
import lord.daniel.alexander.event.impl.game.PacketEvent;
import lord.daniel.alexander.event.impl.game.RunTickEvent;
import lord.daniel.alexander.event.impl.game.SilentMoveEvent;
import lord.daniel.alexander.event.impl.game.UpdateMotionEvent;
import lord.daniel.alexander.module.abstracts.AbstractModule;
import lord.daniel.alexander.module.data.ModuleData;
import lord.daniel.alexander.module.enums.EnumModuleType;
import lord.daniel.alexander.settings.impl.mode.StringModeValue;
import lord.daniel.alexander.util.player.MoveUtil;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;

/**
 * Written by Daniel. on 12/11/2023
 * Please don't use this code without my permission.
 *
 * @author Daniel.
 */

@ModuleData(name = "Disabler", categories = {EnumModuleType.EXPLOIT})
public class DisablerModule extends AbstractModule {

    private final StringModeValue modeValue = new StringModeValue("Mode", this, "RussianIntaveTest", new String[]{"RussianIntaveTest"});

    boolean intaveTp;

    @EventLink
    public final Listener<RunTickEvent> runTickEventListener = runTickEvent -> {
        setSuffix(modeValue.getValue());
    };

    @EventLink
    public final Listener<UpdateMotionEvent> updateMotionEventListener = updateMotionEvent -> {
        if(modeValue.is("RussianIntaveTest")) {
            if (updateMotionEvent.getStage() == UpdateMotionEvent.Stage.MID) {
                int ticksExisted = mc.thePlayer.ticksExisted;

                if (ticksExisted > 20 && ticksExisted <= 40 && mc.thePlayer.onGround) {
                    this.intaveTp = true;
                } else if (ticksExisted == 100) {
                    this.intaveTp = false;
                }

                if (intaveTp) {
                    updateMotionEvent.setOnGround(true);

                    double movementOffset = 0.1 * (ticksExisted % 2 == 0 ? 1 : -1);
                    updateMotionEvent.setPosX(updateMotionEvent.getPosX() - movementOffset);
                    updateMotionEvent.setPosZ(updateMotionEvent.getPosZ() - movementOffset);
                    updateMotionEvent.setPosY(MoveUtil.getMoveUtil().roundToGround(updateMotionEvent.getPosY() + 1));
                }
            }
        }
    };

    @EventLink
    public final Listener<PacketEvent> packetEventListener = packetEvent -> {
        if(modeValue.is("RussianIntaveTest")) {
            if(packetEvent.getPacket() instanceof S08PacketPlayerPosLook) {
                this.intaveTp = false;
            }
        }
    };

    @EventLink
    public final Listener<SilentMoveEvent> silentMoveEventListener = silentMoveEvent -> {
        if(modeValue.is("RussianIntaveTest")) {
            if(this.intaveTp) {
                mc.thePlayer.movementInput.moveForward = 0;
                mc.thePlayer.movementInput.moveStrafe = 0;
                mc.thePlayer.movementInput.jump = false;
            }
        }
    };

    @Override
    public void onEnable() {

    }

    @Override
    public void onDisable() {

    }

}
